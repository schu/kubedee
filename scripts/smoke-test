#!/bin/bash

set -euo pipefail
set -x

bash_source="${BASH_SOURCE[0]}"
while [[ -L "${bash_source}" ]]; do
  bash_dir="$(cd -P "$(dirname "${bash_source}")" && pwd)"
  bash_source="$(readlink "${bash_source}")"
  [[ "${bash_source}" != /* ]] && bash_source="${bash_dir}/${bash_source}"
done
readonly dir="$(cd -P "$(dirname "${bash_source}")" && pwd)"

readonly tmp_dir="$(mktemp -d "/tmp/kubedee-test-XXXXXX")"
cleanup() {
  lxc list --format json |
    jq -r '[ .[] | select(.name | contains("kubedee-smoke-test-"))] | .[].name' |
    xargs -r -I '{}' lxc delete -f {} || true
  lxc network list --format json |
    jq -r '[ .[] | select( (.name | contains("kubedee")) and (.used_by | length == 0) )] | .[].name' |
    xargs -r -I '{}' lxc network delete {} || true
  rm -rf "${tmp_dir}"
}
trap cleanup EXIT

if [[ $# -gt 0 ]]; then
  readonly k8s_versions=("$@")
else
  readonly k8s_versions=("v1.16.8" "v1.17.4" "v1.18.0")
fi

readonly kubedee_dir="${tmp_dir}/kubedee"
mkdir -p "${kubedee_dir}"

kdee() {
  kubedee --no-set-context --dir "${kubedee_dir}" "$@"
}

for v in "${k8s_versions[@]}"; do
  cluster_name="smoke-test-${v}"
  kdee up --kubernetes-version "${v}" "${cluster_name}"
  kdee smoke-test "${cluster_name}"
  kdee delete "${cluster_name}"

  # Delete Kubernetes binaries in between to save disk space
  # (and make smoke-test work on sourcehut)
  rm -rf "${kubedee_dir}/cache/"*"/kubernetes/"
done
